// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  events        Event[]
  courses       Course[]
  documentation Documentation[]

  @@map("users")
}

model Event {
  id          String        @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  category    EventCategory
  isAllDay    Boolean       @default(false)
  userId      String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations (opcional en producción)
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("events")
}

enum EventCategory {
  TRABAJO
  PERSONAL
  ESTUDIO
  SALUD
}

model Course {
  id          String         @id @default(cuid())
  title       String
  description String?
  platform    String
  status      CourseStatus   @default(POR_COMENZAR)
  url         String?
  notes       String?
  userId      String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations (opcional en producción)
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("courses")
}

enum CourseStatus {
  EN_PROGRESO
  COMPLETADO
  POR_COMENZAR
}

model Documentation {
  id          String                @id @default(cuid())
  title       String
  description String?
  url         String
  type        DocumentationType
  category    DocumentationCategory
  tags        String[]
  userId      String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  // Relations (opcional en producción)
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documentation")
}

enum DocumentationType {
  DOCUMENTACION_OFICIAL
  TUTORIAL
  CHEAT_SHEET
  ARTICULO
  VIDEO
}

enum DocumentationCategory {
  MULTIPLATAFORMA
  BACKEND
  BASES_DATOS
  FRONTEND
  CIENCIA_DATOS
  LENGUAJES
} 